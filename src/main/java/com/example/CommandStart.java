package com.example;

import java.util.ArrayList;
import java.util.List;

import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;


public class CommandStart implements Action {
    @Override
    public SendMessage handle(Update update) {
        var msg = update.getMessage();
        var chatId = msg.getChatId().toString();
        var out = new StringBuilder();
        out.append("–ü—Ä–∏–≤–µ—Ç, ").append(msg.getFrom().getFirstName()).append("\\! üòÄ").append("\n").
        append("–Ø –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π:").append("\n\n").
        append("üéØ –ù–∞–π–¥–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏ —ç–º–æ–¥–∑–∏\n\n").
        append("üñº –£–≤–µ–ª–∏—á–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n\n").
        append("üì§ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ\n\n");
        
        //–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        InlineKeyboardMarkup keyboard = SetBeginKeyboard();

        final SendMessage sendMessage = new SendMessage();
        sendMessage.enableMarkdown(true);
        sendMessage.setChatId(chatId);
        sendMessage.setText(out.toString());
        sendMessage.setReplyMarkup(keyboard);
        sendMessage.setParseMode("MarkdownV2");
        return sendMessage;
    }

    //–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    private InlineKeyboardMarkup SetBeginKeyboard() {
        
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        //–°—Ç—Ä–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        List<InlineKeyboardButton> row4 = new ArrayList<>();

        //–ö–Ω–æ–ø–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º —Å—Ç–∏–∫–µ—Ä–æ–≤ 
        InlineKeyboardButton searchStickersBtn = new InlineKeyboardButton();
        searchStickersBtn.setText("–ù–∞–π—Ç–∏ —Å—Ç–∏–∫–µ—Ä");
        searchStickersBtn.setCallbackData("searchStickersBtn");
        row1.add(searchStickersBtn);
        
        //–ö–Ω–æ–ø–∫–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º
        InlineKeyboardButton randomStickersBtn = new InlineKeyboardButton();
        randomStickersBtn.setText("–°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä");
        randomStickersBtn.setCallbackData("randomStickersBtn");
        row1.add(randomStickersBtn);

        //–ö–Ω–æ–ø–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º —ç–º–æ–¥–∂–∏
        InlineKeyboardButton searchEmojiBtn = new InlineKeyboardButton();
        searchEmojiBtn.setText("–ù–∞–π—Ç–∏ —ç–º–æ–¥–∂–∏");
        searchEmojiBtn.setCallbackData("searchEmojiBtn");
        row2.add(searchEmojiBtn);
        
        //–ö–Ω–æ–ø–∫–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —ç–º–æ–¥–∂–∏
        InlineKeyboardButton randomEmojiBtn = new InlineKeyboardButton();
        randomEmojiBtn.setText("–°–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∂–∏");
        randomEmojiBtn.setCallbackData("randomEmojiBtn");
        row2.add(randomEmojiBtn);

        //–ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        InlineKeyboardButton upscaleButton = new InlineKeyboardButton();
        upscaleButton.setText("–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ");
        upscaleButton.setCallbackData("upscalePhotoBtn");
        row3.add(upscaleButton);

        //–ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ
        InlineKeyboardButton convertPhotoBtn = new InlineKeyboardButton();
        convertPhotoBtn.setText("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ");
        convertPhotoBtn.setCallbackData("convertPhotoBtn");
        row4.add(convertPhotoBtn);

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);

        keyboardMarkup.setKeyboard(rows);

        return keyboardMarkup;
    }

    @Override
    public SendMessage callback(Update update) {
        return handle(update);
    }

    @Override
    public MapPack getPack() {
        // TODO Auto-generated method stub
        return null;
    }
}
